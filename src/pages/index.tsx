import type { Folder, Topic } from '@prisma/client'
import { type NextPage } from 'next'
import { useSession } from 'next-auth/react'
import Head from 'next/head'
import { useRef, useState } from 'react'
import { Header } from '~/components/Header'
import { NoteCard } from '~/components/NoteCard'
import { NoteEditor } from '~/components/NoteEditor'
import { BiPlus } from 'react-icons/bi'

import { api } from '~/utils/api'
import {
  Box,
  Button,
  Divider,
  Flex,
  GridItem,
  HStack,
  Input,
  Modal,
  ModalBody,
  ModalCloseButton,
  ModalContent,
  ModalFooter,
  ModalHeader,
  ModalOverlay,
  SimpleGrid,
  Text,
  VStack,
  calc,
  useDisclosure,
} from '@chakra-ui/react'

declare global {
  interface Window {
    my_modal_1: { showModal: () => void }
  }
}

const Home: NextPage = () => {
  return (
    <>
      <Head>
        <title>Notetaker</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Flex h="100vh" flexDirection="column">
        <Header />
        <Content />
      </Flex>
    </>
  )
}

export default Home

const Content = () => {
  const { data: sessionData } = useSession()
  const { isOpen, onOpen, onClose } = useDisclosure()
  const [showModal, setShowModal] = useState(false)
  const [selectedFolder, setSelectedFolder] = useState<Folder | null>(null)
  const [selectedTopic, setSelectedTopic] = useState<Topic | null>(null)
  const inputRef = useRef<HTMLInputElement>(null)

  const { data: folders, refetch: refetchFolders } = api.folder.getAll.useQuery(undefined, {
    enabled: sessionData?.user !== undefined,
    onSuccess: (data) => {
      setSelectedFolder(selectedFolder ?? data[0] ?? null)
    },
  })

  const createFolder = api.folder.create.useMutation({
    onSuccess: () => {
      void refetchFolders()
    },
  })

  const { data: topics, refetch: refetchTopics } = api.topic.getAll.useQuery(
    {
      folderId: selectedFolder?.id ?? '',
    },
    {
      enabled: sessionData?.user !== undefined && selectedFolder !== null,
    },
  )

  const { data: notes, refetch: refetchNotes } = api.note.getAll.useQuery(
    {
      topicId: selectedTopic?.id ?? '',
    },
    {
      enabled: sessionData?.user !== undefined && selectedTopic !== null,
    },
  )

  const createTopic = api.topic.create.useMutation({
    onSuccess: () => {
      void refetchTopics()
    },
  })

  const deleteTopic = api.topic.delete.useMutation({
    onSuccess: () => {
      void refetchTopics()
    },
  })

  const createNote = api.note.create.useMutation({
    onSuccess: () => {
      void refetchNotes()
    },
  })

  const deleteNote = api.note.delete.useMutation({
    onSuccess: () => {
      void refetchNotes()
    },
  })

  const onCloseModal = () => {
    // setShowModal(false)
    onClose()
  }

  const onOpenModal = () => {
    // setShowModal(true)
    onOpen()
  }

  return (
    <Box flex="1">
      <HStack h="full" align="stretch" gap={0}>
        <Box p="8px" bg="gray.700" color="white">
          <VStack align="stretch">
            {folders?.map((folder) => (
              <Box
                key={folder.id}
                onClick={() => {
                  setSelectedFolder(folder)
                }}
                _hover={{ cursor: 'pointer' }}
                py="4px"
                textAlign="center"
                fontSize="20px"
                borderRadius="6px"
                bg={selectedFolder?.id === folder.id ? 'blue.300' : undefined}
              >
                {folder.title}
              </Box>
            ))}
          </VStack>
          <Divider my="8px" />
          <Input
            type="text"
            placeholder="New Folder"
            onKeyDown={(e) => {
              if (e.key === 'Enter') {
                createFolder.mutate({ title: e.currentTarget.value })
                e.currentTarget.value = ''
              }
            }}
          />
        </Box>
        <Box
          p="8px"
          bg="while"
          borderRight="1px"
          borderColor="gray.100"
          h={`calc(100vh - 68px)`}
          w="250px"
          overflow="auto"
        >
          <Input
            type="text"
            placeholder="New Topic"
            onKeyDown={(e) => {
              if (e.key === 'Enter') {
                createTopic.mutate({
                  title: e.currentTarget.value,
                  folderId: selectedFolder?.id ?? '',
                })
                e.currentTarget.value = ''
              }
            }}
          />
          <VStack align="stretch" gap={0} mb="10px">
            {topics?.map((topic) => (
              <>
                <Box
                  key={topic.id}
                  onClick={() => {
                    setSelectedTopic(topic)
                  }}
                  // textAlign="center"
                  fontSize="20px"
                  // borderRadius="0 6px 6px 0"
                  p="8px"
                  borderLeft="4px"
                  borderColor="white"
                  _hover={{ cursor: 'pointer' }}
                  sx={
                    selectedTopic?.id === topic.id
                      ? {
                          bg: 'gray.100',
                          borderLeft: '4px',
                          borderColor: 'black.300',
                        }
                      : {
                          bg: 'white',
                        }
                  }
                >
                  <Text>{topic.title}</Text>
                </Box>
                <Divider />
              </>
            ))}
          </VStack>
        </Box>
        <Box fontSize="3xl" fontWeight="bold" flex={1} p="8px" h={`calc(100vh - 68px)`} overflowY="auto">
          <Button onClick={onOpenModal} rounded="full" p={0}>
            <BiPlus size="30px" />
          </Button>
          <Text fontSize="32px" fontWeight="bold">
            {selectedTopic?.title}
          </Text>
          <Box>
            {notes?.map((note) => {
              return (
                <div key={note.id}>
                  <NoteCard note={note} onDelete={() => deleteNote.mutate({ id: note.id })} />
                </div>
              )
            })}
          </Box>
        </Box>
      </HStack>
      <Modal isOpen={isOpen} onClose={onCloseModal}>
        <ModalOverlay />
        <ModalContent>
          <ModalHeader>Modal Title</ModalHeader>
          <ModalCloseButton />
          <ModalBody>
            <NoteEditor
              onSave={({ title, content }) => {
                createNote.mutate({
                  title,
                  content,
                  topicId: selectedTopic?.id ?? '',
                })
              }}
              onClose={onCloseModal}
            />
          </ModalBody>

          {/* <ModalFooter>
                <Button colorScheme="blue" mr={3} onClick={onCloseModal}>
                  Close
                </Button>
                <Button variant="ghost">Secondary Action</Button>
              </ModalFooter> */}
        </ModalContent>
      </Modal>
    </Box>
  )
}
